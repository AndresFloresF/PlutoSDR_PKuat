/**
 ******************************************************************************
 * @file    InertialData.h
 * @author  Eduardo Munoz
 * @brief   Header file of inertial models of sun and magnetic field
 ******************************************************************************
   */
#ifndef INERTIADATA_H
#define INERTIADATA_H

#include <math.h>
const float igrfSg[104][4] = { {1,0,-29405,5.7},{1,1,-1450.9,7.4},{2,0,-3749.4,-16.5},{2,1,5165,-12.124},
{2,2,1452.3,-1.8187},{3,0,3408,5.5},{3,1,-7290.9,-18.065},{3,2,2393.9,6.0031},
{3,3,415.6,-9.4868},{4,0,3950.6,-5.25},{4,1,4479.8,-8.8544},{4,2,337.7,-23.087},
{4,3,-647.16,10.877},{4,4,35.496,-3.7715},{5,0,-1845.1,-2.3625},{5,1,3692.5,5.0833},
{5,2,1443.3,-4.6111},{5,3,-662.16,0.94124},{5,4,-335.44,2.8841},{5,5,9.4711,0.6314},
{6,0,952.88,-7.2188},{6,1,1238.2,-5.6709},{6,2,1089.4,5.9777},{6,3,-1210.5,12.952},
{6,4,-197.54,-7.6396},{6,5,31.412,0},{6,6,-43.459,0.60452},{7,0,2161.1,-2.6813},
{7,1,-2720.5,-7.0939},{7,2,-237.48,0},{7,3,1157,14.335},{7,4,195.11,1.2349},
{7,5,39.517,-3.0872},{7,6,-17.437,-1.9375},{7,7,6.3431,0.51781},{8,0,1191.5,0},
{8,1,650.2,6.7031},{8,2,-987.05,-5.6082},{8,3,-20.71,16.568},{8,4,-564.13,-2.6736},
{8,5,226.91,5.9322},{8,6,94.054,2.0596},{8,7,-41.363,-0.25068},{8,8,-0.18801,0.25068},
{9,0,474.8,0},{9,1,1070.2,0},{9,2,315.09,0},{9,3,-124.47,0},
{9,4,-62.013,0},{9,5,-444.72,0},{9,6,19.138,0},{9,7,66.295,0},
{9,8,-24.031,0},{9,9,-7.2477,0},{10,0,-342.81,0},{10,1,-1508.4,0},
{10,2,-21.069,0},{10,3,280.98,0},{10,4,-105.18,0},{10,5,51.741,0},
{10,6,-37.188,0},{10,7,38.082,0},{10,8,11.456,0},{10,9,-6.3715,0},
{10,10,-2.2558,0},{11,0,1033.3,0},{11,1,-652.94,0},{11,2,-1022.6,0},
{11,3,754.33,0},{11,4,-215.56,0},{11,5,47.527,0},{11,6,-65.882,0},
{11,7,-4.9604,0},{11,8,31.864,0},{11,9,-5.289,0},{11,10,0.54407,0},
{11,11,1.7979,0},{12,0,-1320.4,0},{12,1,-89.703,0},{12,2,397.56,0},
{12,3,843.99,0},{12,4,-584.3,0},{12,5,233.81,0},{12,6,62.49,0},
{12,7,58.527,0},{12,8,-17.558,0},{12,9,-12.772,0},{12,10,0.94325,0},
{12,11,-3.0596,0},{12,12,-0.17033,0},{13,0,126.96,0},{13,1,-1557.2,0},
{13,2,773.76,0},{13,3,898.19,0},{13,4,-295.24,0},{13,5,556.7,0},
{13,6,0,0},{13,7,213.71,0},{13,8,0,0},{13,9,27.229,0},
{13,10,2.8388,0},{13,11,5.0184,0},{13,12,-1.4194,0},{13,13,-0.2227,0} };

float igrfSh[104][4] = { {1,0,0,0},{1,1,4652.5,-25.9},{2,0,0,0},{2,1,-5181.6,-52.308},
{2,2,-636.18,-19.399},{3,0,0,0},{3,1,-251.38,18.371},{3,2,468.44,-2.1301},
{3,3,-429.6,0.39528},{4,0,0,0},{4,1,1560,-0.5534},{4,2,-619.84,25.435},
{4,3,417.7,7.5299},{4,4,-258.61,-3.6975},{5,0,0,0},{5,1,484.95,0},
{5,2,1600.8,19.213},{5,3,-570.39,-2.8237},{5,4,71.659,6.6556},{5,5,69.384,0.21047},
{6,0,0,0},{6,1,-361.05,0},{6,2,375.1,-23.911},{6,3,526.04,-12.952},
{6,4,-351.97,4.3655},{6,5,20.709,0},{6,6,45.742,0.67169},{7,0,0,0},
{7,1,-1826.7,21.282},{7,2,-489.44,17.376},{7,3,45.052,-16.383},{7,4,290.2,-2.4698},
{7,5,-13.584,-6.7919},{7,6,-65.874,0.24218},{7,7,-1.1651,0.19418},{8,0,0,0},
{8,1,563.06,-13.406},{8,2,-858.06,33.649},{8,3,530.17,-8.2839},{8,4,-312.81,13.368},
{8,5,220.98,-4.4492},{8,6,24.715,-2.7461},{8,7,-17.297,1.2534},{8,8,1.7548,0},
{9,0,0,0},{9,1,-2981.2,0},{9,2,1195.2,0},{9,3,813.23,0},
{9,4,-287.52,0},{9,5,-212.25,0},{9,6,135.7,0},{9,7,3.0134,0},
{9,8,-3.6176,0},{9,9,5.8469,0},{10,0,0,0},{10,1,827.17,0},
{10,2,-42.138,0},{10,3,595.01,0},{10,4,560.98,0},{10,5,-635.67,0},
{10,6,-4.132,0},{10,7,-86.186,0},{10,8,-27.821,0},{10,9,-0.26548,0},
{10,10,-5.2239,0},{11,0,0,0},{11,1,0,0},{11,2,1022.6,0},
{11,3,-196.78,0},{11,4,-95.806,0},{11,5,95.054,0},{11,6,-18.824,0},
{11,7,-84.327,0},{11,8,-36.416,0},{11,9,-26.445,0},{11,10,-5.4407,0},
{11,11,-1.5079,0},{12,0,0,0},{12,1,-1076.4,0},{12,2,397.56,0},
{12,3,908.91,0},{12,4,-876.45,0},{12,5,33.402,0},{12,6,166.64,0},
{12,7,-23.411,0},{12,8,35.116,0},{12,9,5.1087,0},{12,10,-8.4892,0},
{12,11,0,0},{12,12,0.28388,0},{13,0,0,0},{13,1,-1557.2,0},
{13,2,928.51,0},{13,3,1796.4,0},{13,4,-393.65,0},{13,5,-904.64,0},
{13,6,-45.155,0},{13,7,80.141,0},{13,8,-14.279,0},{13,9,34.036,0},
{13,10,14.194,0},{13,11,-4.0147,0},{13,12,-1.1355,0},{13,13,-0.33405,0} };

float g[14][15];
float h[14][15];

int getInertialSun(double MJD_UTC, float* Sun) {
	double T_UT1 = (MJD_UTC - 51544.5) / 36525;
	//Todas las cantidades se modificaron para que sean en rad
	double mean_longitude_sun = 4.894960506 + 628.33188 * T_UT1;
	double mean_anomaly_sun = 6.2400350378 + 628.3018653 * T_UT1;
	double ecliptic_longitude_sun = mean_longitude_sun + 0.0334172292 * sin(mean_anomaly_sun) + 0.01603948001 * sin(2 * mean_anomaly_sun);

	double epsilon = 0.40909274321 - 0.00022696258 * T_UT1;
	Sun[0] = cos(ecliptic_longitude_sun);
	Sun[1] = cos(epsilon) * sin(ecliptic_longitude_sun);
	Sun[2] = sin(epsilon) * sin(ecliptic_longitude_sun);
	return 0;
}

int magnet(float r, float theta, float phi, float days, float* B_teme) {
	float Br, Bt, Bp, P11, P10, dP11, dP10, P2, dP2, P20, dP20, K;
	int gn, gm, hn, hm;

	if (theta > -0.00000001 && theta < 0.00000001) {
		theta = 0.00000001;
	}
	else if (theta < 180.00000001 && theta>179.99999999) {
		theta = 179.99999999;
	}
	//The angles must be converted from degrees into radians
	double r_theta = (90 - theta) * 0.01745329251;
	double r_phi = phi * 0.01745329251;

	for (int x = 1;x < 105;x++) {
		gn = igrfSg[x - 1][0];
		gm = igrfSg[x - 1][1];
		hn = igrfSh[x - 1][0];
		hm = igrfSh[x - 1][1];
		g[gn][gm + 1] = igrfSg[x - 1][2] + igrfSg[x - 1][3] * (days - 51544.5) * 0.0027397;
		h[hn][hm + 1] = igrfSh[x - 1][2] + igrfSh[x - 1][3] * (days - 51544.5) * 0.0027397;
	}
	Br = 0;
	Bt = 0;
	Bp = 0;
	P11 = 1;
	P10 = P11;
	dP11 = 0;
	dP10 = dP11;

	for (int m = 0;m <= 13;m++) {
		for (int n = 1;n <= 13;n++) {
			if (m <= n) {
				if (n == m) {
					P2 = sin(r_theta) * P11;
					dP2 = sin(r_theta) * dP11 + cos(r_theta) * P11;
					P11 = P2;
					P10 = P11;
					P20 = 0;
					dP11 = dP2;
					dP10 = dP11;
					dP20 = 0;
				}
				else if (n == 1) {
					P2 = cos(r_theta) * P10;
					dP2 = cos(r_theta) * dP10 - sin(r_theta) * P10;
					P20 = P10;
					P10 = P2;
					dP20 = dP10;
					dP10 = dP2;
				}
				else {
					K = (pow((float)(n - 1), 2) - pow((float)m, 2)) / ((2 * n - 1) * (2 * n - 3));
					P2 = cos(r_theta) * P10 - K * P20;
					dP2 = cos(r_theta) * dP10 - sin(r_theta) * P10 - K * dP20;
					P20 = P10;
					P10 = P2;
					dP20 = dP10;
					dP10 = dP2;
				}
				Br = Br + pow((Earth_radius / r), (n + 2)) * (n + 1) * ((g[n][m + 1] * cos(m * r_phi) + h[n][m + 1] * sin(m * r_phi)) * P2);
				Bt = Bt + pow((Earth_radius / r), (n + 2)) * ((g[n][m + 1] * cos(m * r_phi) + h[n][m + 1] * sin(m * r_phi)) * dP2);
				Bp = Bp + pow((Earth_radius / r), (n + 2)) * (m * ((-1) * g[n][m + 1] * sin(m * r_phi) + h[n][m + 1] * cos(m * r_phi)) * P2);
			}

		}
	}

	B_teme[0] = Br;
	B_teme[1] = -Bt;
	B_teme[2] = -Bp / sin(r_theta);
	return 0;
}

int tan2inert(float* B_teme,float* LLA, double JDUTC, float* B_i) {
	//Calculation of LST
	//float JDTAI = JDUTC + 0.00042824074;
	//float JDUT1 = JDUTC - 0.00000221458;
	//float JDTT = JDTAI + 0.0003725;
	//float DU = JDUT1 - 2451545;
	float MJDTAI = JDUTC + 0.00042824074;
	float MJDUT1 = JDUTC - 0.00000221458;
	float MJDTT = MJDTAI + 0.0003725;
	float DU = MJDUT1 - 51544.5;
	int integ = floor(MJDUT1);
	float fracJDUT1 = MJDUT1+ 0.5 - integ;
	float theta = 0.7790572732640 + 0.00273781191135448 * DU + fracJDUT1;
	//float T = (JDTT - 2451545) / 36525;
	float T = (MJDTT - 51544.5) / 36525;
	float GMST = 86400 * theta + (0.014506 + 4612.15634 * T + 1.3915817 * T * T -
		0.00000044 * T*T*T - 0.000029956 * T*T*T*T - 0.0000000368 * T*T*T*T*T) / 15;
	float LST = GMST + (240) * LLA[1];
	//LST from seconds to degrees
		LST = LST * 0.00416666666666666;
	//Angle conversion to radians
		double Lat = LLA[0] * 0.01745329251;
		LST = LST * 0.01745329251;
	//Coordinate transformation
	B_i[0] = (B_teme[0] * cos(Lat) + B_teme[1] * sin(Lat)) * cos(LST) - B_teme[2] * sin(LST);
	B_i[1] = (B_teme[0] * cos(Lat) + B_teme[1] * sin(Lat)) * sin(LST) + B_teme[2] * cos(LST);
	B_i[2] = (B_teme[0] * sin(Lat) - B_teme[1] * cos(Lat));
	return 0;
}

void GetInertialMag(double MJD_UTC, float* LLA, float* B_i) {
	float B_teme[3]{};
	magnet(LLA[2] + 6371.2, LLA[0], LLA[1], MJD_UTC, B_teme);
	tan2inert(B_teme, LLA, MJD_UTC, B_i);
	for (int i = 0; i < 3; i++)
		B_i[i] = B_i[i] * 1e-9;
}

#endif
